package access;

//접근제어자 정리
/*
 * 1. public 		: (제일많이 사용) 모든 접근을 허용. 패키지를 뛰어 넘어 모두 
 * 2. protected		: 상속받은 클래스, 또는 같은 패키지 내만 가능(부모의 것은 내것, 패키지끼리 연결)
 * 3. default		: 기본 제어자, 아무것도 안 붙였다.(앞이 비어있음)
 * 					  클래스 내부 혹은 같은 패키지 내에서만 접근 가능(사용 가능)
 * 4. private		: (2번째로 많이 사용) 클래스 외부에서 접근 불가, 다른 클래스의 접근이 불가. 못봄, 같은 클래스 내부(속한 클래스 에서만)에서는 가능
 * 
 * 객체지향 프로그래밍의 특징(이것이 자바다 p189)
 * 
 * 1. 캡슐화 : 변수를 클래스 아래에 생성해주면 클래스 하나로 관리가 가능하다.
 *  객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것.
 *  외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있습니다.
 *  
 *  2. 상속(이것이 자바다 p190)
 *  부모의 내용이 자식한테 전이
 *  일반적으로 상속은 부모가 가지고 있는 제산을 자식에게 물려주는 것.
 *  자식은 특별한 노력없이 부모가 물려준 재산을 가지게 됩니다.
 *  OOP에서도 부모 역할의 상위 객체와 자식역할의 하위 객체가 있습니다. 
 *  자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어
 *  하위객체가 사용할 수 있도록 해주는 기술입니다.
 * 	자바의 최상위 클래스는 Object입니다. (선조의 개념)
 * 
 * 3. 다형성
 * 외부 형태를 바꿀 수 있음.
 * 같은 타입이지만 실행결과가 다양한 객체를 이용할 수 있는 성질
 * 자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용합니다.
 * 부모 타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현
 * 객체가 대입될 수 있습니다.
 * 
 */


public class AccessModifier {

}
